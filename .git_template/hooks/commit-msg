#!/usr/bin/env python3

# This file is a slightly modified version of
# https://gist.github.com/jasonrobertfox/8057124
import sys
import subprocess


def check_format_rules(lineno, line):
    if lineno == 0:
        if not line:
            return False
        if not line[0].isupper():
            return "The first line should be capitalized."
        if len(line) > 50:
            return "The first line should be less than 50 chars long"
        if line.endswith("."):
            return "The first line should not end with a period"
    if lineno == 1 and not line.startswith("#") and line:
        return "The second line should be blank"
    if len(line) > 72:
        return "Line {} is longer than 72 chars".format(lineno + 1)
    return False


def input_by_reading_stdin(message):
    with open('/dev/tty') as sys.stdin:
        user_input = input(message)
    return user_input.lower() if user_input is not None else ""


def validate_commit(message_file):
    while True:
        commit_msg = []
        errors = []

        with open(message_file) as commit_file:
            for lineno, line in enumerate(commit_file):
                commit_msg.append(line)
                stripped = line.strip()
                if "diff --git a" in stripped:
                    break
                commit_error = check_format_rules(lineno, stripped)
                if commit_error:
                    errors.append(commit_error)
        if errors:
            with open(message_file, 'w') as commit_file:
                for line in commit_msg:
                    commit_file.write(line)
                commit_file.write("# Commit Message Errors:\n")
                for error in errors:
                    commit_file.write("#    {}\n".format(error))

            print("Invalid git commit message.")
            confirm_edit = input_by_reading_stdin("Edit message? [yn] > ")
            if confirm_edit in ('y', 'yes'):
                with open('/dev/tty') as sys.stdin:
                    cmd = "vim - +'e {}'".format(message_file)
                    success = subprocess.call(cmd, shell=True)
            else:
                force_commit = input_by_reading_stdin("Force commit? [yn] > ")
                if force_commit not in ('y', 'yes'):
                    sys.exit(1)
        break

validate_commit(sys.argv[1])
